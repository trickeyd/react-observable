name: Release and Publish

on:
  push:
    branches:
      - main
      - master

jobs:
  release:
    name: Release and Publish
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore: release')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # We need to fetch all history and tags for git-version-all to work correctly
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run tests
        run: yarn test

      - name: Build package
        run: yarn build

      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Bump version and Publish
        id: version_bump
        run: |
          # Temporarily switch to a new branch to create the version commit
          git checkout -b release-branch

          # Bump the version using yarn, but don't create a git tag or commit yet.
          # The new version will be in package.json
          yarn version --patch --no-git-tag-version

          # Get the new version from package.json
          VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$VERSION" >> $GITHUB_OUTPUT

          # Commit the version bump
          git add package.json
          git commit -m "chore: release v$VERSION"

          # Push the commit to the main branch
          git push origin HEAD:${{ github.ref_name }}

          # Now, publish to npm using the correct new version
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Git Tag
        run: |
          VERSION=${{ steps.version_bump.outputs.NEW_VERSION }}
          echo "Creating tag v$VERSION"
          git tag "v$VERSION"
          git push origin "v$VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
